class Carousel{constructor(t){const s={title:"",subtitle:"",icon:"tungsten",cardWidth:200,cardGutter:10,cardHeight:240,imgHeight:100,...t};this.containerSelector=s.container,this.fetchCards=s.fetchCards,this.icon=s.icon,this.title=s.title,this.subtitle=s.subtitle,this.cardWidth=s.cardWidth,this.cardGutter=s.cardGutter,this.cardHeight=s.cardHeight,this.imgHeight=s.imgHeight,this.stepSize=this.cardWidth+2*this.cardGutter,this.chunkSize=6,this.scrollCurrentPosition=0,this.init()}init(){this.mainContainer=document.querySelector(`#${this.containerSelector}`),this.mainContainer.classList.add("carousel"),this.mainContainer.innerHTML=(()=>`\n      <div class="header">\n        <div>\n          <div class="icon">\n            <span class="material-icons">${this.icon}</span>\n          </div>\n        </div>\n        <div>\n          <h2 class="title">\n            ${this.title} <span class="material-icons">chevron_right</span>\n          </h2>\n          <p class="subtitle">\n            ${this.subtitle}\n          </p>\n        </div>\n      </div>\n      <div class="cards-container" style="height: ${this.cardHeight+20}px">\n        <div class="cards-scroll">\n        </div>\n        <a class="previous hidden" href="javascript:;" title="Previous cards" style="height: ${this.cardHeight+16}px">\n          <span class="material-icons">chevron_left</span>\n        </a>\n        <a class="next hidden" href="javascript:;" title="Next cards" style="height: ${this.cardHeight+16}px">\n          <span class="material-icons">chevron_right</span>\n        </a>\n      </div>\n    `)(this.title,this.subtitle),this.controlPrevious=document.querySelector(`#${this.containerSelector} .previous`),this.controlNext=document.querySelector(`#${this.containerSelector} .next`),this.cardsScrollContainer=document.querySelector(`#${this.containerSelector} .cards-container`),this.cardsScroll=document.querySelector(`#${this.containerSelector} .cards-scroll`),this.mainContainer.addEventListener("mouseenter",(()=>this.showControls())),this.mainContainer.addEventListener("mouseleave",(()=>this.hideControls())),this.controlPrevious.addEventListener("mousedown",(()=>this.scrollPrevious())),this.controlNext.addEventListener("mousedown",(()=>this.scrollNext())),this.cardsScroll.addEventListener("touchstart",(t=>this.swipeHandler(t)),!1),this.cardsScroll.addEventListener("touchmove",(t=>this.swipeHandler(t)),!1),this.cardsScroll.addEventListener("touchend",(t=>this.swipeHandler(t)),!1),this.appendCards(this.chunkSize)}showControls(){this.scrollCurrentPosition>0?this.showControlPrevious(!0):this.showControlPrevious(!1),this.showControlNext(!0)}hideControls(){this.showControlPrevious(!1),this.showControlNext(!1)}showControlPrevious(t){!0===t?this.controlPrevious.classList.remove("hidden"):this.controlPrevious.classList.add("hidden")}showControlNext(t){!0===t?this.controlNext.classList.remove("hidden"):this.controlNext.classList.add("hidden")}scrollPrevious(){this.scrollCurrentPosition>0&&(this.scrollCurrentPosition--,this.cardsScroll.style.left=`-${this.scrollCurrentPosition*this.stepSize}px`),this.showControls()}scrollNext(){this.appendActivator(),this.scrollCurrentPosition++,this.cardsScroll.style.left=`-${this.scrollCurrentPosition*this.stepSize}px`,this.showControls()}appendActivator(){this.cardsScroll.offsetWidth-this.cardsScrollContainer.offsetWidth+this.cardsScroll.offsetLeft-this.stepSize<0&&this.appendCards()}showLoader(t){if(!0===t){const t=`\n      <div class="card loader" style="width: ${this.cardWidth}px; height:${this.cardHeight}px; margin: 0 ${this.cardGutter}px;">\n        <div class="img placeholder" style="height: ${this.imgHeight}px">\n        </div>\n        <div class="caption" style="height: ${this.cardHeight-this.imgHeight}px;">\n          <div class="placeholder" style="width:100%"></div>\n          <div class="placeholder" style="width:40%"></div>\n          <div class="placeholder" style="width:80%"></div>\n        </div>\n      </div>\n    `;let s="";for(let i=0;i<this.chunkSize;i++)s+=t;this.cardsScroll.innerHTML+=s}else!1===t&&document.querySelectorAll(`#${this.containerSelector} .card.loader`).forEach((t=>t.remove()))}appendCards(t){const s=t=>`\n    <div>\n      <div class="card" style="width: ${this.cardWidth}px; height:${this.cardHeight}px; margin: 0 ${this.cardGutter}px;">\n        <div class="img" style="height: ${this.imgHeight}px; background-image: url('${t.image}');">\n          <div class="type">${i[t.type]}</div>\n          <div class="duration">${e(t.duration)}</div>\n        </div>\n        <div class="caption" style="height: ${this.cardHeight-this.imgHeight}px;">\n          ${t.title}\n        </div>\n      </div>\n      ${"collection"===t.cardinality?`\n          <div class="collection" style="margin: -5px ${this.cardGutter}px;">\n            <div class="sublayer level1">\n            </div>\n            <div class="sublayer level2">\n            </div>\n          </div>\n        `:""}\n      </div>\n    `,i={video:"VIDEO",elearning:"ELEARNING",learning_plan:"LEARNING PLAN",playlist:"PLAYLIST"},e=t=>{const s=Math.floor(t/3600).toString(),i=Math.floor(t%3600/60).toString(),e=(t%60).toString().padStart(2,"0");return t>=3600?`${s}h ${i}min`:`${i}:${e}`};this.showLoader(!0),this.fetchCards(t).then((t=>{this.showLoader(!1);const i=t.reduce(((t,i)=>t+s(i)),this.cardsScroll.innerHTML);this.cardsScroll.innerHTML=i,this.appendActivator()}))}swipeHandler(t){if(t.preventDefault(),"touchstart"===t.type)this.touchStartX=t.changedTouches[0].clientX,this.scrollStartX=this.cardsScroll.offsetLeft;else if("touchmove"===t.type){this.cardsScroll.style.transitionDuration="0.05s",this.lastInterval=this.touchCurrentX-t.changedTouches[0].clientX,this.touchCurrentX=t.changedTouches[0].clientX;const s=this.touchCurrentX-this.touchStartX;this.scrollStartX+s>0?this.cardsScroll.style.left="0px":this.cardsScroll.style.left=`${this.scrollStartX+s}px`}else if("touchend"===t.type){this.cardsScroll.style.transitionDuration="0.6s";let s=t.changedTouches[0].clientX-this.touchStartX;for(;Math.abs(this.lastInterval)>1;)this.scrollStartX+s>0?(this.cardsScroll.style.left="0px",this.lastInterval=0):(this.cardsScroll.style.left=`${this.scrollStartX+s}px`,s-=this.lastInterval,this.lastInterval/=1.08);this.appendActivator()}}}